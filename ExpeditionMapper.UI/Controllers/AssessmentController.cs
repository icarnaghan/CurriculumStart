using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using ExpeditionMapper.BE.Domain;
using ExpeditionMapper.DAL.Provider;
using ExpeditionMapper.UI.Models;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;

namespace ExpeditionMapper.UI.Controllers
{
    public class AssessmentController : BaseController
    {
        private readonly ExpeditionContext db = new ExpeditionContext();

        public ActionResult Assessment_Read(int staCollectionId, [DataSourceRequest] DataSourceRequest request)
        {
            IQueryable<Assessment> assessments = db.Assessments.Where(h => h.StaCollectionId == staCollectionId);
            return Json(assessments.ToDataSourceResult(request));
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Assessment_Create([DataSourceRequest] DataSourceRequest request,
            AssessmentViewModel assessment)
        {
            if (ModelState.IsValid)
            {
                // Create a new Expedition entity and set its properties from the posted FallExpedition Model
                var entity = new Assessment
                {
                    Id = assessment.Id,
                    Name = assessment.Name,
                    Description = assessment.Description,
                    StaCollectionId = assessment.StaCollectionId
                };
                // Add the entity
                db.Assessments.Add(entity);
                // Insert the entities in the database
                db.SaveChanges();
                // Get the Id generated by the database
                assessment.Id = entity.Id;
            }
            // Return the inserted entities. The grid needs the generated ID. Also return any validation errors.
            return Json(new[] {assessment}.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Assessment_Update([DataSourceRequest] DataSourceRequest request,
            AssessmentViewModel assessment)
        {
            if (ModelState.IsValid)
            {
                // Create a new Product entity and set its properties from the posted ExpeditionViewModel
                var entity = new Assessment
                {
                    Id = assessment.Id,
                    Name = assessment.Name,
                    Description = assessment.Description,
                    StaCollectionId = assessment.StaCollectionId
                };
                // Attach the entity
                db.Assessments.Attach(entity);
                // Change its state to Modified so Entity Framework can update the existing product instead of creating a new one
                db.Entry(entity).State = EntityState.Modified;
                // Update the entity in the database
                db.SaveChanges();
            }
            // Return the updated entities. Also return any validation errors.
            return Json(new[] {assessment}.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Assessment_Destroy([DataSourceRequest] DataSourceRequest request,
            AssessmentViewModel assessment)
        {
            if (ModelState.IsValid)
            {
                // Create a new Product entity and set its properties from the posted ProductViewModel
                var entity = new Assessment
                {
                    Id = assessment.Id,
                    Name = assessment.Name,
                    Description = assessment.Description,
                    StaCollectionId = assessment.StaCollectionId
                };
                // Attach the entity
                db.Assessments.Attach(entity);
                // Delete the entity
                db.Assessments.Remove(entity);
                // Delete the entity in the database
                db.SaveChanges();
            }
            // Return the removed product. Also return any validation errors.
            return Json(new[] {assessment}.ToDataSourceResult(request, ModelState));
        }
    }
}