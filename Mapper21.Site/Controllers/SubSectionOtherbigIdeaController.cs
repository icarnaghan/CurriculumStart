using System;
using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using Mapper21.Business.Dto;
using Mapper21.Data.Provider;
using Mapper21.Domain;

namespace Mapper21.Site.Controllers
{
    public class SubSectionOtherBigIdeaController : BaseController
    {
        private readonly Mapper21Context db = new Mapper21Context();

        public ActionResult OtherBigIdea_Read(Guid subSectionId, [DataSourceRequest] DataSourceRequest request)
        {
            IQueryable<SubSectionOtherBigIdea> otherBigIdeas = db.SubSectionOtherBigIdeas.Where(g => g.SubSectionId == subSectionId);
            return Json(otherBigIdeas.ToDataSourceResult(request));
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult OtherBigIdea_Create(Guid subSectionId, [DataSourceRequest] DataSourceRequest request,
            GridDto otherBigIdea)
        {
            if (ModelState.IsValid)
            {
                // Create a new Section entity and set its properties from the posted Section Model
                var entity = new SubSectionOtherBigIdea
                {
                    Id = Guid.NewGuid(),
                    Name = otherBigIdea.Name,
                    SubSectionId = otherBigIdea.ParentId
                };
                // Add the entity
                db.SubSectionOtherBigIdeas.Add(entity);
                // Insert the entities in the database
                db.SaveChanges();
                // Get the Id generated by the database
                otherBigIdea.Id = entity.Id;
            }
            // Return the inserted entities. The grid needs the generated ID. Also return any validation errors.
            return Json(new[] {otherBigIdea}.ToDataSourceResult(request, ModelState));
        }

        public ActionResult OtherBigIdea_Update([DataSourceRequest] DataSourceRequest request,
            GridDto otherBigIdea)
        {
            if (ModelState.IsValid)
            {
                // Create a new Product entity and set its properties from the posted Section Model
                var entity = new SubSectionOtherBigIdea
                {
                    Id = otherBigIdea.Id,
                    Name = otherBigIdea.Name,
                    SubSectionId = otherBigIdea.ParentId
                };
                // Attach the entity
                db.SubSectionOtherBigIdeas.Attach(entity);
                // Change its state to Modified so Entity Framework can update the existing product instead of creating a new one
                db.Entry(entity).State = EntityState.Modified;
                // Update the entity in the database
                db.SaveChanges();
            }
            // Return the updated entities. Also return any validation errors.
            return Json(new[] {otherBigIdea}.ToDataSourceResult(request, ModelState));
        }

        public ActionResult OtherBigIdea_Destroy([DataSourceRequest] DataSourceRequest request,
            GridDto otherBigIdea)
        {
            if (ModelState.IsValid)
            {
                // Create a new Product entity and set its properties from the posted ProductViewModel
                var entity = new SubSectionOtherBigIdea
                {
                    Id = otherBigIdea.Id,
                    Name = otherBigIdea.Name,
                    SubSectionId = otherBigIdea.ParentId
                };
                // Attach the entity
                db.SubSectionOtherBigIdeas.Attach(entity);
                // Delete the entity
                db.SubSectionOtherBigIdeas.Remove(entity);
                // Delete the entity in the database
                db.SaveChanges();
            }
            // Return the removed product. Also return any validation errors.
            return Json(new[] {otherBigIdea}.ToDataSourceResult(request, ModelState));
        }
    }
}