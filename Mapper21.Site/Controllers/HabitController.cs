using System;
using System.Collections.Generic;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using Mapper21.Business.Dto;
using Mapper21.Business.Interfaces;
using Mapper21.Domain;

namespace Mapper21.Site.Controllers
{
    public class HabitController : BaseController
    {
        private readonly IHabitManager _habitManager;

        public HabitController(IHabitManager habitManager)
        {
            _habitManager = habitManager;
        }

        public ActionResult Habit_Read(Guid sectionId, [DataSourceRequest] DataSourceRequest request)
        {
            IList<HabitDto> habits = _habitManager.GetList(sectionId);
            return Json(habits.ToDataSourceResult(request));
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Habit_Create([DataSourceRequest] DataSourceRequest request,
            GridDto habit)
        {
            if (ModelState.IsValid)
            {
                // Create a new Section entity and set its properties from the posted Section Model
                var entity = new HabitDto
                {
                    Id = habit.Id,
                    HabitId = habit.HabitId,
                    Context = habit.Context,
                    SectionId = habit.ParentId
                };
                var newHabit = _habitManager.SaveOrUpdate(entity);

                // Get the Id generated by the database
                habit.Id = newHabit.Id;
            }
            // Return the inserted entities. The grid needs the generated ID. Also return any validation errors.
            return Json(new[] {habit}.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Habit_Update([Bind(Exclude="BigIdeaForScienceId,CommonCoreStandardId,BigIdeaForSocialStudiesId")] [DataSourceRequest] DataSourceRequest request,
            GridDto updateHabit)
        {
            if (ModelState.IsValid)
            {
                // Create a new Product entity and set its properties from the posted Section Model
                var entity = new HabitDto
                {
                    Id = updateHabit.Id,
                    HabitId = updateHabit.HabitId,
                    Context = updateHabit.Context,
                    SectionId = updateHabit.ParentId
                };
                _habitManager.SaveOrUpdate(entity);
            }
            // Return the updated entities. Also return any validation errors.
            return Json(new[] { updateHabit }.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Habit_Destroy([DataSourceRequest] DataSourceRequest request,
            GridDto deleteHabit)
        {
            if (ModelState.IsValid)
            {
                _habitManager.Delete(deleteHabit.Id);
            }
            // Return the removed product. Also return any validation errors.
            return Json(new[] { deleteHabit }.ToDataSourceResult(request, ModelState));
        }
    }
}