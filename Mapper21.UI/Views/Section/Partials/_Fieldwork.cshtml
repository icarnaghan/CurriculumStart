@using Mapper21.UI.Models

@(Html.Kendo().Grid<FieldworkViewModel>
      ()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(f => f.Name);
          columns.Bound(f => f.Description);
          columns.Bound(f => f.Notes);
          columns.Command(commands =>
          {
              commands.Edit(); // The "edit" command will edit and update data items
              commands.Destroy(); // The "destroy" command removes data items
          }).Title("Commands").Width(200);
      })
      .ToolBar(toolbar =>
      {
          toolbar.Create(); // The "create" command adds new data items
          //toolbar.Save(); // The "save" command saves the changed data items
      })
      // .Editable(editable => editable.Mode(GridEditMode.InCell)) // Use in-cell editing mode
      .Editable(editable => editable.Mode(GridEditMode.InLine))
      .DataSource(dataSource =>
          dataSource.Ajax()
              //.Batch(true) // Enable batch updates
              .Model(model =>
              {
                  model.Id(g => g.Id); // Specify the property which is the unique identifier of the model
                  model.Field(g => g.Id).Editable(false); // Make the ProductID property not editable
                  model.Field(g => g.SubSectionId).DefaultValue(@ViewBag.SubSectionId);
              })
              .Create(create => create.Action("Fieldwork_Create", "Fieldwork")) // Action method invoked when the user saves a new data item
              .Read(read => read.Action("Fieldwork_Read", "Fieldwork", new { caseStudyId = ViewBag.SubSectionId })) // Action method invoked when the grid needs data
              .Update(update => update.Action("Fieldwork_Update", "Fieldwork")) // Action method invoked when the user saves an updated data item
              .Destroy(destroy => destroy.Action("Fieldwork_Destroy", "Fieldwork")) // Action method invoked when the user removes a data item
      )
      .Pageable()
      )