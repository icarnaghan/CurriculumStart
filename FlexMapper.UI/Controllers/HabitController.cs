using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using FlexMapper.BE.Domain;
using FlexMapper.DAL.Provider;
using FlexMapper.UI.Models;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;

namespace FlexMapper.UI.Controllers
{
    public class HabitController : BaseController
    {
        private readonly FlexMapperContext db = new FlexMapperContext();

        public ActionResult ExpeditionHabit_Read(int expeditionId, [DataSourceRequest] DataSourceRequest request)
        {
            IQueryable<Habit> expeditionHabits = db.ExpeditionHabits.Where(h => h.ExpeditionId == expeditionId);
            return Json(expeditionHabits.ToDataSourceResult(request));
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult ExpeditionHabit_Create([DataSourceRequest] DataSourceRequest request,
            HabitViewModel habit)
        {
            if (ModelState.IsValid)
            {
                // Create a new Expedition entity and set its properties from the posted FallExpedition Model
                var entity = new Habit
                {
                    Id = habit.Id,
                    Description = habit.Habit,
                    Rationale = habit.Rationale,
                    ExpeditionId = habit.ExpeditionId
                };
                // Add the entity
                db.ExpeditionHabits.Add(entity);
                // Insert the entities in the database
                db.SaveChanges();
                // Get the Id generated by the database
                habit.Id = entity.Id;
            }
            // Return the inserted entities. The grid needs the generated ID. Also return any validation errors.
            return Json(new[] {habit}.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Expeditionhabit_Update([DataSourceRequest] DataSourceRequest request,
            HabitViewModel habit)
        {
            if (ModelState.IsValid)
            {
                // Create a new Product entity and set its properties from the posted ExpeditionViewModel
                var entity = new Habit
                {
                    Id = habit.Id,
                    Description = habit.Habit,
                    Rationale = habit.Rationale,
                    ExpeditionId = habit.ExpeditionId
                };
                // Attach the entity
                db.ExpeditionHabits.Attach(entity);
                // Change its state to Modified so Entity Framework can update the existing product instead of creating a new one
                db.Entry(entity).State = EntityState.Modified;
                // Update the entity in the database
                db.SaveChanges();
            }
            // Return the updated entities. Also return any validation errors.
            return Json(new[] {habit}.ToDataSourceResult(request, ModelState));
        }

        public ActionResult ExpeditionHabit_Destroy(int expeditionId, [DataSourceRequest] DataSourceRequest request,
            HabitViewModel habit)
        {
            if (ModelState.IsValid)
            {
                // Create a new Product entity and set its properties from the posted ProductViewModel
                var entity = new Habit
                {
                    Id = habit.Id,
                    Description = habit.Habit,
                    Rationale = habit.Rationale,
                    ExpeditionId = habit.ExpeditionId
                };
                // Attach the entity
                db.ExpeditionHabits.Attach(entity);
                // Delete the entity
                db.ExpeditionHabits.Remove(entity);
                // Delete the entity in the database
                db.SaveChanges();
            }
            // Return the removed product. Also return any validation errors.
            return Json(new[] {habit}.ToDataSourceResult(request, ModelState));
        }
    }
}