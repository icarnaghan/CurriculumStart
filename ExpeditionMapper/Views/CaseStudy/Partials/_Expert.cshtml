<h4><label>Experts</label></h4>

@(Html.Kendo().Grid<ExpeditionMapper.Models.ViewModels.ExpertViewModel>
    ()
    .Name("grid2")
    .Columns(columns =>
    {
        columns.Bound(e => e.Name);
        columns.Bound(e => e.Description);
        columns.Command(commands =>
        {
            commands.Edit(); // The "edit" command will edit and update data items
            commands.Destroy(); // The "destroy" command removes data items
        }).Title("Commands").Width(200);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create(); // The "create" command adds new data items
        //toolbar.Save(); // The "save" command saves the changed data items
    })
        // .Editable(editable => editable.Mode(GridEditMode.InCell)) // Use in-cell editing mode
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .DataSource(dataSource =>
    dataSource.Ajax()
        //.Batch(true) // Enable batch updates
    .Model(model =>
    {
        model.Id(g => g.Id); // Specify the property which is the unique identifier of the model
        model.Field(g => g.Id).Editable(false); // Make the ProductID property not editable
        model.Field(g => g.CaseStudyId).DefaultValue(@ViewBag.CaseStudyId);    
    })
        .Create(create => create.Action("Expert_Create", "Expert")) // Action method invoked when the user saves a new data item
        .Read(read => read.Action("Expert_Read", "Expert", new { caseStudyId = ViewBag.CaseStudyId }))  // Action method invoked when the grid needs data
        .Update(update => update.Action("Expert_Update", "Expert"))  // Action method invoked when the user saves an updated data item
        .Destroy(destroy => destroy.Action("Expert_Destroy", "Expert")) // Action method invoked when the user removes a data item
    )
    .Pageable()
)
